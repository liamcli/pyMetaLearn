<xs:schema targetNamespace="http://openml.org/openml" xmlns:oml="http://openml.org/openml" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="run" type="oml:run"/>
  <xs:complexType name="run">
    <xs:sequence>
      <xs:element name="run_id" minOccurs="0" type="xs:integer"/> <!-- The integer id of the run. Added by server. Ignored when uploading a run -->
      <xs:element name="uploader" minOccurs="0" type="xs:integer"/> <!-- The id of user that uploaded the run. Added by server. Ignored when uploading a run -->
      <xs:element name="task_id" type="xs:integer"/> <!-- The id of the task that is solved in this run. This id is given in the task description. -->
      <xs:element name="implementation_id" type="xs:string"/> <!-- The id of the implementation (algorithm, workflow,...) used to solve the task. This id is returned by the API when you first upload the implementation, or given in the implementation description when you download an existing implementation. -->      
      <xs:element name="setup_id" minOccurs="0" type="xs:integer"/> <!-- the setup id, will be ignored when uploading a run (i.e., it will be searched based on the parameter settings) -->
      <xs:element name="parameter_setting" minOccurs="0" maxOccurs="unbounded" type="oml:parameter_setting"/> <!-- The parameter settings used in this run -->
      <xs:element name="input_data" minOccurs="0" type="oml:data"/> <!-- all data that served as input for the run. Determined server side, will be ignored on uploading -->
      <xs:element name="output_data" minOccurs="0" type="oml:data"/> <!-- all data that was the output of this run, i.e., predictions, evaluation scores. Most of this will be determined server side, but users can also provide evaluation scores for their own evaluation measures. -->
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="parameter_setting">
    <xs:sequence>
      <xs:element name="name" type="xs:string"/> <!-- The name of the parameter that is set -->
      <xs:element name="value" type="xs:string"/> <!-- The value used for this parameter --> 
      <xs:element name="component" minOccurs="0" maxOccurs="1" type="xs:string"/> <!-- If the parameter belongs to a subcomponent of an implementation, the implementation name of that component. This name must match a component of the implementation that is stated above (in 'implementation_id'). --> 
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="data">
    <xs:sequence>
      <xs:element name="dataset" minOccurs="0" maxOccurs="unbounded" type="oml:dataset" /> 
      <xs:element name="evaluation" minOccurs="0" maxOccurs="unbounded" type="oml:evaluation" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="dataset">
    <xs:sequence>
      <xs:element name="did" type="xs:integer"/> <!-- A reference to the dataset table, by did.-->
      <xs:element name="name" type="xs:string"/> <!-- The name of the dataset -->
      <xs:element name="url" type="xs:string"/> <!-- A url to the datset -->
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="evaluation">
    <xs:sequence>
      <xs:element name="did" minOccurs="0" type="xs:integer"/> <!-- A reference to the dataset table, by did. Ignored when uploading -->
      <xs:element name="name" type="xs:string"/> <!-- A reference to the math_function that was used -->
      <xs:element name="implementation" type="xs:string"/> <!-- A reference to the implementation table entry (implementing this specific math function) -->
      <xs:element name="value" type="xs:decimal"/> <!-- The result of the math_function. (Sidenote: If you sumbit values of math_functions that are also run on line, it will be used to test whether the outcome is similar.) -->
    </xs:sequence>
  </xs:complexType>
</xs:schema>
